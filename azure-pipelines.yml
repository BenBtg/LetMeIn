# This template was generated with the VS Code extension Azure Pipeline YAML Generator
# A complete series on how to manage your Xamarin Forms application using Azure DevOps is available here:
# https://damienaicheh.github.io/xamarin/azure/devops/2020/02/27/run-unit-tests-using-xamarin-and-azure-devops-en.html
 
trigger: none

pool:
  vmImage: macOS-latest

# Update all the variables just below.
# Assuming you will create a secret group to store all your secure keys and password here are the list of all the variables you need to add:
# - keystore
# - keystore.password
# - keystore.alias
# - keystore.aliasPassword
# - p12FileName
# - p12Password
# - provisioningProfile

# You need to install this set of extensions to update your identifiers:
# https://marketplace.visualstudio.com/items?itemName=vs-publisher-473885.motz-mobile-buildtasks
# You need to install this set of extensions to automatically manage the version of your application:
# https://marketplace.visualstudio.com/items?itemName=DamienAicheh.mobile-versioning-task
# You need to install this extension to add a banner to your launch icon:
# https://marketplace.visualstudio.com/items?itemName=DamienAicheh.launch-icon-task

variables:
  - group: LetMeIn Secrets
  - name: xamarinSdkVersion
    value: '6_6_0'
  - name: solutionPath
    value: '**/*.sln'
  - name: buildConfiguration
    value: 'Release'
  - name: packageName
    value: 'com.benbtg.letmein'
  - name: appLabel
    value: 'LetMeIn'
  - name: bundleIdentifier
    value: 'com.benbtg.letmein'
  - name: bundleName
    value: 'LetMeIn'
  - name: bundleDisplayName
    value: 'LetMeIn'
  - name: serverEndpoint # Visual Studio App Center endpoint
    value: 'BenBtgAppCenter'
  - name: iOSAppSlug
    value: 'Btg/LetMeIn-iOS'
  - name: androidAppSlug
    value: 'Btg/LetMeIn-Android'
  - name: iOSDistributionGroupId
    value: 'BetaTesters'
  - name: androidDistributionGroupId
    value: 'BetaTesters'

stages:
  - stage: Run_Unit_Tests
    jobs:
      - job:
        displayName: 'Run Unit Tests'
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solutionPath)'

          - task: UseDotNet@2 
            displayName: ".NET Core 3.1.x"
            inputs:
              version: '3.1.x'
              packageType: sdk

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              projects: '$(Build.SourcesDirectory)/LetMeIn.Tests/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: '$(Build.SourcesDirectory)/LetMeIn.Tests/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

  - stage: Build_Xamarin_Android
    dependsOn: Run_Unit_Tests
    jobs:
      - job:
        displayName: 'Build Xamarin.Android'
        workspace:
          clean: all
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solutionPath)'

          - task: android-manifest-package-name@1
            inputs:
              sourcePath: '$(Build.SourcesDirectory)/LetMeIn.Android/Properties/AndroidManifest.xml'
              packageName: '$(packageName)'
              appLabel: '$(appLabel)'
              printFile: true

          - task: ExtractVersionFromTag@1

          - task: UpdateAndroidVersionManifest@1
            inputs:
              androidManifestPath: '$(Build.SourcesDirectory)/LetMeIn.Android/Properties/AndroidManifest.xml'

          - task: LaunchIconBadge@1
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/LetMeIn.Android/Resources'
              contents: '**/icon.png'
              bannerVersionNamePosition: 'bottomRight'
              bannerVersionNameText: '$(buildConfiguration)'

          - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(xamarinSdkVersion)
            displayName: 'Select the Xamarin SDK version'
            enabled: true

          - task: DownloadSecureFile@1
            name: keyStore
            displayName: "Download keystore from secure files"
            inputs:
              secureFile: '$(keystore)'

          - task: Bash@3
            displayName: "Build Android package"
            inputs:
              targetType: "inline"
              script: |
                msbuild -restore $(Build.SourcesDirectory)/LetMeIn.Android/*.csproj -t:SignAndroidPackage -p:AndroidPackageFormat=apk -p:Configuration=$(buildConfiguration) -p:AndroidKeyStore=True -p:AndroidSigningKeyStore=$(keyStore.secureFilePath) -p:AndroidSigningStorePass=$(keystore.password) -p:AndroidSigningKeyAlias=$(keystore.alias) -p:AndroidSigningKeyPass=$(keystore.aliasPassword)
          
          - task: CopyFiles@2
            displayName: 'Copy deliverables'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/LetMeIn.Android/bin/$(buildConfiguration)'
              Contents: '*Signed.apk'
              TargetFolder: 'drop/$(buildConfiguration)_android'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish release'
            inputs:
              pathToPublish: 'drop/$(buildConfiguration)_android'
              artifactName: '$(buildConfiguration)_android'

  - stage: Build_Xamarin_iOS
    dependsOn: Run_Unit_Tests
    jobs:
      - job:
        displayName: 'Build Xamarin.iOS'
        workspace:
          clean: all
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solutionPath)'

          - task: ios-bundle-identifier@1
            inputs:
              sourcePath: '$(Build.SourcesDirectory)/LetMeIn.iOS/Info.plist'
              bundleIdentifier: '$(bundleIdentifier)'
              bundleName: '$(bundleName)'
              bundleDisplayName: '$(bundleDisplayName)'
              printFile: true

          - task: ExtractVersionFromTag@1

          - task: UpdateiOSVersionInfoPlist@1
            inputs:
              infoPlistPath: '$(Build.SourcesDirectory)/LetMeIn.iOS/Info.plist'   

          - task: LaunchIconBadge@1
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/LetMeIn.iOS/Assets.xcassets/AppIcon.appiconset'
              contents: '**/*.png'
              bannerVersionNamePosition: 'bottomRight'
              bannerVersionNameText: '$(buildConfiguration)'

          - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(xamarinSdkVersion)
            displayName: 'Select the Xamarin SDK version'
            enabled: true

          - task: InstallAppleCertificate@2
            inputs:
              certSecureFile: '$(p12FileName)'
              certPwd: '$(p12Password)'
              keychain: 'temp'
              deleteCert: true

          - task: InstallAppleProvisioningProfile@1
            inputs:
              provisioningProfileLocation: 'secureFiles'
              provProfileSecureFile: '$(provisioningProfile)'
              removeProfile: true
              
          - task: XamariniOS@2
            inputs:
              solutionFile: '$(solutionPath)'
              configuration: '$(buildConfiguration)'
              packageApp: true
              buildForSimulator: false
              runNugetRestore: false
              signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
              signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'

          - task: CopyFiles@2
            displayName: 'Copy deliverables'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/LetMeIn.iOS/bin/iPhone/$(buildConfiguration)'
              Contents: '*.ipa'
              TargetFolder: 'drop/$(buildConfiguration)_ios'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish release'
            inputs:
              pathToPublish: 'drop/$(buildConfiguration)_ios'
              artifactName: '$(buildConfiguration)_ios'

  - stage: Distribute_Android
    dependsOn: Build_Xamarin_Android
    jobs:
      - job:
        displayName: 'Distribute Xamarin.Android'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: 'releases_drop'

          - task: AppCenterDistribute@3
            displayName: 'Distribute to Visual Studio App Center'
            inputs:
              serverEndpoint: '$(serverEndpoint)'
              appSlug: '$(androidAppSlug)'
              appFile: 'releases_drop/$(buildConfiguration)_android/*.apk'
              releaseNotesOption: 'input'
              releaseNotesInput: 'New Version'
              destinationType: 'groups'
              distributionGroupId: '$(androidDistributionGroupId)'

  - stage: Distribute_iOS
    dependsOn: Build_Xamarin_iOS
    jobs:
      - job:
        displayName: 'Distribute Xamarin.iOS'
        steps:

        - task: DownloadBuildArtifacts@0
          displayName: 'Download artifacts'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            downloadPath: 'releases_drop'

        - task: AppCenterDistribute@3
          displayName: 'Distribute to Visual Studio App Center'
          inputs:
            serverEndpoint: '$(serverEndpoint)'
            appSlug: '$(iOSAppSlug)'
            appFile: 'releases_drop/$(buildConfiguration)_ios/*.ipa'
            releaseNotesOption: 'input'
            releaseNotesInput: 'New Version'
            destinationType: 'groups'
            distributionGroupId: '$(iOSDistributionGroupId)'
